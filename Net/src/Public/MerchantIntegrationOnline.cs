using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using Newtonsoft.Json;

namespace Net.Public
{
    public class MerchantIntegrationOnline
    {

        public MerchantConfiguration MerchantConfiguration { get; }
        public IHttpClient HttpClient { get; }

        public MerchantIntegrationOnline(
            string env = null,
            string country = null,
            string partnerId = null,
            string partnerSecret = null,
            string merchantId = null,
            string clientId = null,
            string clientSecret = null,
            string redirectUri = null,
            IHttpClient httpClient = null
            )
        {
            MerchantConfiguration = new MerchantConfiguration(partnerId, partnerSecret, merchantId, clientId, clientSecret, "", redirectUri, env, country);
            HttpClient = httpClient ?? new MerchantHttpClient(MerchantConfiguration);
        }

        /// <summary>
        /// Initiate a one-time payment.
        /// </summary>
        /// <param name="partnerTxId">Specify the partner transaction ID. It is used as the idempotency key of the request</param>
        /// <param name="partnerGroupTxId">This is the unique identifier of each transaction generated by the partner. Each transaction might consist of several charges. Usually the value is a single receipt ID from the partner and can be displayed to the user.</param>
        /// <param name="amount">Transaction amount as integer. A positive integer in the smallest currency unit</param>
        /// <param name="currency">Currency that is associated with the payment amount. Specify the three-letter ISO currency code. Currently, supports only SGD, MYR, PHP, and IDR.</param> 
        /// <param name="description">Description of the charge.</param>
        /// <param name="metaInfo">Additional information related to the current transaction.</param>
        /// <param name="items">Array of items included in the transaction</param>
        /// <param name="shippingDetails">Sharing recommended attributes will help Grab in better evaluating and approving the PayLater transaction, and create a better overall experience for your customers.</param>
        /// <returns></returns>
        public HttpResponseMessage OnaChargeInit(
            string partnerTxId,
            string partnerGroupTxId,
            long amount,
            string currency,
            string description = null,
            Dictionary<string, dynamic> metaInfo = null,
            Dictionary<string, dynamic> items = null,
            Dictionary<string, dynamic> shippingDetails = null,
            string[] hidePaymentMethods = null)
        {
            var requestBody = new
            {
                partnerTxID = partnerTxId,
                partnerGroupTxID = partnerGroupTxId,
                amount,
                currency,
                merchantID = MerchantConfiguration.MerchantId,
                description,
                metaInfo,
                items,
                shippingDetails,
                hidePaymentMethods
            };

            Uri uri = MerchantConfiguration.BuildUri(PathName.ChargeInit);
            HttpContent content = CreateStringContent(JsonConvert.SerializeObject(requestBody));
            MerchantRequest request = new MerchantRequest(uri, HttpMethod.Post, content, pathName: PathName.ChargeInit);
            return HttpClient.SendRequest(request);
        }

        /// <summary>
        /// Generate a Web URL that provides a web interface for Grab's user-level authentication.
        /// </summary>
        /// <param name="partnerTxId">Specify the partner transaction ID. It is used as the idempotency key of the request</param>
        /// <param name="partnerGroupTxId">This is the unique identifier of each transaction generated by the partner. Each transaction might consist of several charges. Usually the value is a single receipt ID from the partner and can be displayed to the user.</param>
        /// <param name="amount">Transaction amount as integer. A positive integer in the smallest currency unit</param>
        /// <param name="currency">Currency that is associated with the payment amount. Specify the three-letter ISO currency code. Currently, supports only SGD, MYR, PHP, and IDR.</param> 
        /// <param name="state">Specify a random string used to mitigate CSRF attacks. Calling application should compare the value supplied here with the value returned from the final redirect (which also has the state parameter). Recommend using a base64 or hex encoded random string.</param>
        /// <param name="codeVerifier">Generated code verifier value</param>
        /// <param name="description">Description of the charge.</param>
        /// <param name="metaInfo">Additional information related to the current transaction.</param>
        /// <param name="items">Array of items included in the transaction</param>
        /// <param name="shippingDetails">Sharing recommended attributes will help Grab in better evaluating and approving the PayLater transaction, and create a better overall experience for your customers.</param>
        /// <returns></returns>
        public HttpResponseMessage OnaCreateWebUrl(
            string partnerTxId,
            string partnerGroupTxId,
            long amount,
            string currency,
            string codeVerifier,
            string description = null,
            Dictionary<string, dynamic> metaInfo = null,
            Dictionary<string, dynamic> items = null,
            Dictionary<string, dynamic> shippingDetails = null,
            string[] hidePaymentMethods = null,
            string state = null
            )
        {
            if (state == null)
            {
                throw new Exception("state parameter can not be null");
            };

            HttpResponseMessage responseMessage = this.OnaChargeInit(partnerTxId, partnerGroupTxId, amount, currency, description, metaInfo, items, shippingDetails, hidePaymentMethods);

            if ((int)responseMessage.StatusCode != 200)
            {
                return responseMessage;
            }

            var bodyResp = JsonConvert.DeserializeObject<dynamic>(responseMessage.Content.ReadAsStringAsync().Result);
            string scope = null;
            if (MerchantConfiguration.Country == "VN")
            {
                scope = "payment.vn.one_time_charge";
            }
            else 
            {
                scope = "openid+payment.one_time_charge";
            }
            var codeChallenge = Utils.Base64URLEncode(Utils.Sha256(codeVerifier));
            var webUrl = MerchantConfiguration.Domain
                + "/grabid/v1/oauth2/authorize?acr_values=consent_ctx%3A"
                + "countryCode%3D" + MerchantConfiguration.Country
                + ",currency%3D" + currency
                + "&client_id=" + MerchantConfiguration.ClientId
                + "&code_challenge=" + codeChallenge
                + "&code_challenge_method=S256&nonce=" + Utils.RandomString(16)
                + "&redirect_uri=" + MerchantConfiguration.RedirectUri
                + "&request=" + bodyResp.request
                + "&response_type=code&scope=" + scope + "&state=" + state;

            return new HttpResponseMessage(HttpStatusCode.OK) { Content = new StringContent(webUrl) };
        }

        /// <summary>
        /// Generate an OAuth 2.0 token by passing code received in the return URL from GrabPay.
        /// </summary>
        /// <param name="partnerTxId">Specify the partner transaction ID. It is used as the idempotency key of the request</param>
        /// <param name="code">Get from the URL parameter in the redirect url.</param>
        /// <returns></returns>
        public HttpResponseMessage OnaOAuth2Token(
            string code,
            string codeVerifier)
        {
            var requestBody = new
            {
                grant_type = "authorization_code",
                client_id = MerchantConfiguration.ClientId,
                client_secret = MerchantConfiguration.ClientSecret,
                code_verifier = Utils.Base64URLEncode(codeVerifier),
                redirect_uri = MerchantConfiguration.RedirectUri,
                code = code
            };

            Uri uri = MerchantConfiguration.BuildUri(PathName.OAuth2Token);
            HttpContent content = CreateStringContent(JsonConvert.SerializeObject(requestBody));
            var request = new MerchantRequest(uri, HttpMethod.Post, content, pathName: PathName.OAuth2Token);
            return HttpClient.SendRequest(request);
        }

        /// <summary>
        /// For completed the transaction.
        /// </summary>
        /// <param name="partnerTxId">Specify the partner transaction ID. It is used as the idempotency key of the request</param>
        /// <param name="accessToken">Get from the API onaOAuth2Token</param>
        /// <returns></returns>
        public HttpResponseMessage OnaChargeComplete(string partnerTxId, string accessToken)
        {
            var requestBody = new
            {
                partnerTxID = partnerTxId
            };

            Uri uri = MerchantConfiguration.BuildUri(PathName.ChargeComplete);
            HttpContent content = CreateStringContent(JsonConvert.SerializeObject(requestBody));
            var request = new MerchantRequest(uri, HttpMethod.Post, content, accessToken: accessToken, pathName: PathName.ChargeComplete);
            return HttpClient.SendRequest(request);
        }

        /// <summary>
        /// For get the status of transaction already completed
        /// </summary>
        /// <param name="partnerTxId">Specify the partner transaction ID. It is used as the idempotency key of the request</param>
        /// <param name="currency">Currency that is associated with the payment amount. Specify the three-letter ISO currency code. Currently, supports only SGD, MYR, PHP, and IDR.</param> 
        /// <param name="accessToken">Get from the API onaOAuth2Token</param>
        /// <returns></returns>
        public HttpResponseMessage OnaGetChargeStatus(string partnerTxId, string currency, string accessToken)
        {
            object[] requestParams = { partnerTxId, currency };
            var uri = MerchantConfiguration.BuildUri(PathName.OnaChargeStatus, requestParams);
            var request = new MerchantRequest(uri, HttpMethod.Get, accessToken: accessToken, pathName: PathName.OnaChargeStatus);
            return HttpClient.SendRequest(request);
        }

        /// <summary>
        /// Refund API to help back the money to use if they we want
        /// </summary>
        /// <param name="refundPartnerTxId">A unique number denoting this refund transaction, generated by the terminal with a fixed length of 32 characters.</param>
        /// <param name="partnerGroupTxId">This is the unique identifier of each transaction generated by the partner. Each transaction might consist of several charges. Usually the value is a single receipt ID from the partner and can be displayed to the user.</param>
        /// <param name="amount">Transaction amount as integer. A positive integer in the smallest currency unit</param>
        /// <param name="currency">Currency that is associated with the payment amount. Specify the three-letter ISO currency code. Currently, supports only SGD, MYR, PHP, and IDR.</param> 
        /// <param name="txID">A unique transaction ID generated by GrabPay.</param>
        /// <param name="description">Description of the refund.</param>
        /// <param name="accessToken">Get from the API onaOAuth2Token</param>
        /// <returns></returns>
        public HttpResponseMessage OnaRefund(string refundPartnerTxId, string partnerGroupTxID, long amount, string currency, string txID, string description, string accessToken)
        {
            var requestBody = new
            {
                partnerTxID = refundPartnerTxId,
                partnerGroupTxID = partnerGroupTxID,
                amount,
                currency,
                description,
                merchantID = MerchantConfiguration.MerchantId,
                originTxID = txID
            };
            var content = CreateStringContent(JsonConvert.SerializeObject(requestBody));
            var uri = MerchantConfiguration.BuildUri(PathName.OnaRefundTxn);
            var request = new MerchantRequest(uri, HttpMethod.Post, content, accessToken, pathName: PathName.OnaRefundTxn);
            return HttpClient.SendRequest(request);
        }

        /// <summary>
        /// Check the status of transaction refund
        /// </summary>
        /// <param name="refundPartnerTxId">A unique number denoting this refund transaction, generated by the terminal with a fixed length of 32 characters.</param>
        /// <param name="currency">Currency that is associated with the payment amount. Specify the three-letter ISO currency code. Currently, supports only SGD, MYR, PHP, and IDR.</param> 
        /// <param name="accessToken">Get from the API onaOAuth2Token</param>
        /// <returns></returns>
        public HttpResponseMessage OnaGetRefundStatus(string refundPartnerTxId, string currency, string accessToken)
        {
            object[] requestParams = { refundPartnerTxId, currency };
            var uri = MerchantConfiguration.BuildUri(PathName.OnaCheckRefundTxn, requestParams);
            var request = new MerchantRequest(uri, HttpMethod.Get, accessToken: accessToken, pathName: PathName.OnaCheckRefundTxn);
            return HttpClient.SendRequest(request);
        }

        /// <summary>
        /// To get the OAuthCode after user payment success on IOS
        /// </summary>
        /// <param name="partnerTxId">Specify the partner transaction ID. It is used as the idempotency key of the request</param>
        /// <param name="currency">Currency that is associated with the payment amount. Specify the three-letter ISO currency code. Currently, supports only SGD, MYR, PHP, and IDR.</param> 
        /// <returns></returns>
        public HttpResponseMessage OnaGetOTCStatus(string partnerTxId, string currency)
        {
            object[] requestParams = { partnerTxId, currency };
            var uri = MerchantConfiguration.BuildUri(PathName.OneTimeChargeStatus, requestParams);
            var request = new MerchantRequest(uri, HttpMethod.Get, pathName: PathName.OneTimeChargeStatus);
            return HttpClient.SendRequest(request);
        }

        /// <summary>
        /// Return StringContent object without CharSet
        /// </summary>
        /// <param name="json">json string</param>
        /// <returns></returns>
        private static StringContent CreateStringContent(string json)
        {
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            content.Headers.ContentType.CharSet = "";
            return content;
        }
    }
}
