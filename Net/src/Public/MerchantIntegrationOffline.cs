using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using Newtonsoft.Json;

namespace Net.Public
{
    public class MerchantIntegrationOffline
    {

        public MerchantConfiguration MerchantConfiguration { get; }
        public IHttpClient HttpClient { get; }

        public MerchantIntegrationOffline(
            string env = null,
            string country = null,
            string partnerId = null,
            string partnerSecret = null,
            string merchantId = null,
            string terminalId = null,
            IHttpClient httpClient = null
            )
        {
            MerchantConfiguration = new MerchantConfiguration(partnerId, partnerSecret, merchantId, "", "", terminalId, "", env, country);
            HttpClient = httpClient ?? new MerchantHttpClient(MerchantConfiguration);
        }

        /// <summary>
        /// Create QR code POS
        /// </summary>
        /// <param name="msgId">The UUID of the request with a fixed length of 32 characters.</param>
        /// <param name="partnerTxId">Specify the partner transaction ID. It is used as the idempotency key of the request</param>
        /// <param name="amount">Transaction amount as integer. A positive integer in the smallest currency unit</param>
        /// <param name="currency">Currency that is associated with the payment amount. Specify the three-letter ISO currency code. Currently, supports only SGD, MYR, PHP, and IDR.</param> 
        /// <returns></returns>
        public HttpResponseMessage PosCreateQRCode(string msgId, string partnerTxId, long amount, string currency)
        {
            var requestBody = new
            {
                partnerTxID = partnerTxId,
                amount,
                currency,
                msgID = msgId,
                grabID = MerchantConfiguration.MerchantId,
                terminalID = MerchantConfiguration.TerminalId
            };

            var content = CreateStringContent(JsonConvert.SerializeObject(requestBody));
            var uri = MerchantConfiguration.BuildUri(PathName.CreateQrCode);
            var request = new MerchantRequest(uri, HttpMethod.Post, content, pathName: PathName.CreateQrCode);
            return HttpClient.SendRequest(request);
        }

        /// <summary>
        /// This API support payment from customer QR code.
        /// </summary>
        /// <param name="msgId">The UUID of the request with a fixed length of 32 characters.</param>
        /// <param name="partnerTxId">Specify the partner transaction ID. It is used as the idempotency key of the request</param>
        /// <param name="amount">Transaction amount as integer. A positive integer in the smallest currency unit</param>
        /// <param name="currency">Currency that is associated with the payment amount. Specify the three-letter ISO currency code. Currently, supports only SGD, MYR, PHP, and IDR.</param> 
        /// <param name="code">Get from the URL parameter in the previous step.</param>
        /// <returns></returns>
        public HttpResponseMessage PosPerformQRCode(string msgId, string partnerTxId, long amount, string currency, string code)
        {
            var requestBody = new
            {
                msgID = msgId,
                grabID = MerchantConfiguration.MerchantId,
                terminalID = MerchantConfiguration.TerminalId,
                partnerID = MerchantConfiguration.PartnerId,
                partnerTxID = partnerTxId,
                amount,
                currency,
                code
            };

            var content = CreateStringContent(JsonConvert.SerializeObject(requestBody));
            var uri = MerchantConfiguration.BuildUri(PathName.PerformTxn);
            var request = new MerchantRequest(uri, HttpMethod.Post, content, pathName: PathName.PerformTxn);
            return HttpClient.SendRequest(request);
        }

        /// <summary>
        /// Cancel transaction if the merchant doesn't pay
        /// </summary>
        /// <param name="msgId">The UUID of the request with a fixed length of 32 characters.</param>
        /// <param name="partnerTxId">Specify the partner transaction ID. It is used as the idempotency key of the request</param>
        /// <param name="origPartnerTxId">he original transaction order number generated by the terminal with a fixed length of 32 characters.</param>
        /// <param name="origTxId">A reference transaction ID, which traces to the original Moca transaction.</param>
        /// <param name="currency">Currency that is associated with the payment amount. Specify the three-letter ISO currency code. Currently, supports only SGD, MYR, PHP, and IDR.</param> 
        /// <returns></returns>
        public HttpResponseMessage PosCancel(string msgId, string partnerTxId, string origPartnerTxId, string origTxId, string currency)
        {
            var requestBody = new
            {
                msgID = msgId,
                grabID = MerchantConfiguration.MerchantId,
                terminalID = MerchantConfiguration.TerminalId,
                currency,
                partnerTxID = partnerTxId,
                origTxID = origTxId
            };

            var content = CreateStringContent(JsonConvert.SerializeObject(requestBody));
            object[] requestParams = { origPartnerTxId };
            var uri = MerchantConfiguration.BuildUri(PathName.CancelQrTxn, requestParams);
            var request = new MerchantRequest(uri, HttpMethod.Put, content, pathName: PathName.CancelQrTxn);
            return HttpClient.SendRequest(request);
        }

        /// <summary>
        /// For refund the transaction already success.
        /// </summary>
        /// <param name="msgId">The UUID of the request with a fixed length of 32 characters.</param>
        /// <param name="amount">Transaction amount as integer. A positive integer in the smallest currency unit</param>
        /// <param name="currency">Currency that is associated with the payment amount. Specify the three-letter ISO currency code. Currently, supports only SGD, MYR, PHP, and IDR.</param> 
        /// <param name="origPartnerTxId">The original transaction order number generated by the terminal with a fixed length of 32 characters.</param>
        /// <param name="reason">The reason explaining the refund.</param>
        /// <returns></returns>
        public HttpResponseMessage PosRefund(string msgId, long amount, string currency, string origPartnerTxId, string reason)
        {
            var requestBody = new
            {
                msgID = msgId,
                amount,
                currency,
                partnerTxID = origPartnerTxId,
                grabID = MerchantConfiguration.MerchantId,
                terminalID = MerchantConfiguration.TerminalId,
                reason
            };

            var content = CreateStringContent(JsonConvert.SerializeObject(requestBody));
            var uri = MerchantConfiguration.BuildUri(PathName.PosRefundTxn);
            var request = new MerchantRequest(uri, HttpMethod.Post, content, pathName: PathName.PosRefundTxn);
            return HttpClient.SendRequest(request);
        }

        /// <summary>
        /// For check the status of transaction create QR code
        /// </summary>
        /// <param name="msgId">The UUID of the request with a fixed length of 32 characters.</param>
        /// <param name="partnerTxId">Specify the partner transaction ID. It is used as the idempotency key of the request</param>
        /// <param name="currency">Currency that is associated with the payment amount. Specify the three-letter ISO currency code. Currently, supports only SGD, MYR, PHP, and IDR.</param> 
        /// <returns></returns>
        public HttpResponseMessage PosGetTxnStatus(string msgId, string partnerTxId, string currency)
        {
            object[] requestParams = { partnerTxId, msgId, currency, MerchantConfiguration.MerchantId, MerchantConfiguration.TerminalId, "P2M" };
            var uri = MerchantConfiguration.BuildUri(PathName.PosChargeStatus, requestParams);
            var content = CreateStringContent("");
            content.Headers.ContentType = new MediaTypeHeaderValue("application/x-www-form-urlencoded");

            var request = new MerchantRequest(uri, HttpMethod.Get, content, contentType: "application/x-www-form-urlencoded", pathName: PathName.PosChargeStatus);

            return HttpClient.SendRequest(request);
        }

        /// <summary>
        /// For check the status of transaction refund
        /// </summary>
        /// <param name="msgId">The UUID of the request with a fixed length of 32 characters.</param>
        /// <param name="refundPartnerTxId">A unique number denoting this refund transaction, generated by the terminal with a fixed length of 32 characters.</param>
        /// <param name="currency">Currency that is associated with the payment amount. Specify the three-letter ISO currency code. Currently, supports only SGD, MYR, PHP, and IDR.</param> 
        /// <returns></returns>
        public HttpResponseMessage PosGetRefundDetails(string msgId, string refundPartnerTxId, string currency)
        {
            object[] requestParams = { refundPartnerTxId, msgId, currency, MerchantConfiguration.MerchantId, MerchantConfiguration.TerminalId, "Refund" };
            var uri = MerchantConfiguration.BuildUri(PathName.PosRefundTxn, requestParams);
            var request = new MerchantRequest(uri, HttpMethod.Get, pathName: PathName.PosRefundTxn);
            return HttpClient.SendRequest(request);
        }

        /// <summary>
        /// Return StringContent object without CharSet
        /// </summary>
        /// <param name="json">json string</param>
        /// <returns></returns>
        private static StringContent CreateStringContent(string json)
        {
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            content.Headers.ContentType.CharSet = "";
            return content;
        }
    }
}
