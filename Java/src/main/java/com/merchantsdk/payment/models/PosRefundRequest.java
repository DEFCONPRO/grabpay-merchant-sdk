package com.merchantsdk.payment.models;

/**
 * PosRefundRequest
 * <p>
 * 
 * 
 */
public class PosRefundRequest {

    public static class TransactionDetails {

        /**
         * Payment channel
         * <p>
         * This field will be used to differentiate the different POS payment channels,
         * and will determine which other Conditional parameters will need to be
         * required in the request, or processed in the response.
         * (Required)
         * 
         */
        private PosPaymentChannel paymentChannel;
        /**
         * storeGrabID
         * <p>
         * This field is the unique store identifier issued by Grab to the merchant.
         * (Required)
         * 
         */
        private String storeGrabID;
        /**
         * This field contains the original payment's merchant's primary transaction
         * reference.
         * (Required)
         * 
         */
        private String originPartnerTxID;
        /**
         * paymentTxID
         * <p>
         * The partner's transaction ID.
         * (Required)
         * 
         */
        private String partnerTxID;
        /**
         * partnerGroupTxID
         * <p>
         * This is the unique identifier of each transaction generated by the partner.
         * Each transaction might consist of several charges. Usually the value is a
         * single receipt ID from the partner and can be displayed to the user.
         * 
         */
        private String partnerGroupTxID;
        /**
         * billRefNumber
         * <p>
         * This field can be used to define the Bill Reference Number when a merchant is
         * receiving payments via a Grab wallet, or non-Grab wallet. When this field is
         * not sent in the request, consumers will be able to enter the reference number
         * themselves in the respective payment app.
         * 
         */
        private String billRefNumber;
        /**
         * amount
         * <p>
         * Transaction amount as integer. A positive integer in the smallest currency
         * unit (e.g., 100 cents to charge S$1.00, a zero-decimal currency). For
         * example, S$5.34 will be represented as 534.
         * (Required)
         * 
         */
        private Long amount;
        /**
         * currency
         * <p>
         * Currency that is associated with the payment amount. Specify the three-letter
         * [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
         * 
         * (Required)
         * 
         */
        private Currency currency;
        /**
         * reason
         * <p>
         * The reason code is for additional information on the payment.
         * 
         * In some cases, `reason` could be empty. For example, when `txStatus​` is
         * ​`success`.
         * 
         * This is a list of possible reasons returned the API response for charge and
         * the status check endpoints. This list might be updated over time. Thus, it is
         * important for your system to handle any unknown reason codes in the response
         * that are not mentioned in this document.
         * 
         * | Value | Description |
         * | ---------------------- |
         * ------------------------------------------------------------ |
         * | `currency_mismatch` | Currency used in this request does not match with the
         * merchant configuration. |
         * | `no_record_found` | No record found for this transaction. |
         * | `authorising` | System is processing a request for the transaction to be
         * authorized. |
         * | `capturing` | System is processing a request for the transaction to be
         * captured. |
         * | `user_fail_consent` | User was not able to provide approval for the
         * transaction in time. |
         * | `pending_user_consent` | Transaction is still pending user's approval on
         * GrabPay's checkout page. |
         * | `pending_capture` | Transaction is still pending a `/charge/complete` call
         * for the payment to be finalized. |
         * | `cancelling` | Transaction is in the process of being cancelled. |
         * | `auth_expired` | Transaction is cancelled as the transaction was not
         * completed with the `/charge/complete` call in time. |
         * | `unknown` | The charge is still being processed, however the reason for
         * this cannot be determined. |
         * | `kyc_compliance_decline` | Transaction was unsuccessful due to regulatory
         * compliance checks. |
         * | `transaction_decline` | Transaction was declined. |
         * | `insufficient_balance` | There was an insufficient balance in the user's
         * wallet to complete the transaction. |
         * 
         * 
         */
        private String reason;

        /**
         * Payment channel
         * <p>
         * This field will be used to differentiate the different POS payment channels,
         * and will determine which other Conditional parameters will need to be
         * required in the request, or processed in the response.
         * (Required)
         * 
         */
        public PosPaymentChannel getPaymentChannel() {
            return paymentChannel;
        }

        /**
         * Payment channel
         * <p>
         * This field will be used to differentiate the different POS payment channels,
         * and will determine which other Conditional parameters will need to be
         * required in the request, or processed in the response.
         * (Required)
         * 
         */
        public void setPaymentChannel(PosPaymentChannel paymentChannel) {
            this.paymentChannel = paymentChannel;
        }

        /**
         * storeGrabID
         * <p>
         * This field is the unique store identifier issued by Grab to the merchant.
         * (Required)
         * 
         */
        public String getStoreGrabID() {
            return storeGrabID;
        }

        /**
         * storeGrabID
         * <p>
         * This field is the unique store identifier issued by Grab to the merchant.
         * (Required)
         * 
         */
        public void setStoreGrabID(String storeGrabID) {
            this.storeGrabID = storeGrabID;
        }

        /**
         * This field contains the original payment's merchant's primary transaction
         * reference.
         * (Required)
         * 
         */
        public String getOriginPartnerTxID() {
            return originPartnerTxID;
        }

        /**
         * This field contains the original payment's merchant's primary transaction
         * reference.
         * (Required)
         * 
         */
        public void setOriginPartnerTxID(String originPartnerTxID) {
            this.originPartnerTxID = originPartnerTxID;
        }

        /**
         * paymentTxID
         * <p>
         * The partner's transaction ID.
         * (Required)
         * 
         */
        public String getPartnerTxID() {
            return partnerTxID;
        }

        /**
         * paymentTxID
         * <p>
         * The partner's transaction ID.
         * (Required)
         * 
         */
        public void setPartnerTxID(String partnerTxID) {
            this.partnerTxID = partnerTxID;
        }

        /**
         * partnerGroupTxID
         * <p>
         * This is the unique identifier of each transaction generated by the partner.
         * Each transaction might consist of several charges. Usually the value is a
         * single receipt ID from the partner and can be displayed to the user.
         * 
         */
        public String getPartnerGroupTxID() {
            return partnerGroupTxID;
        }

        /**
         * partnerGroupTxID
         * <p>
         * This is the unique identifier of each transaction generated by the partner.
         * Each transaction might consist of several charges. Usually the value is a
         * single receipt ID from the partner and can be displayed to the user.
         * 
         */
        public void setPartnerGroupTxID(String partnerGroupTxID) {
            this.partnerGroupTxID = partnerGroupTxID;
        }

        /**
         * billRefNumber
         * <p>
         * This field can be used to define the Bill Reference Number when a merchant is
         * receiving payments via a Grab wallet, or non-Grab wallet. When this field is
         * not sent in the request, consumers will be able to enter the reference number
         * themselves in the respective payment app.
         * 
         */
        public String getBillRefNumber() {
            return billRefNumber;
        }

        /**
         * billRefNumber
         * <p>
         * This field can be used to define the Bill Reference Number when a merchant is
         * receiving payments via a Grab wallet, or non-Grab wallet. When this field is
         * not sent in the request, consumers will be able to enter the reference number
         * themselves in the respective payment app.
         * 
         */
        public void setBillRefNumber(String billRefNumber) {
            this.billRefNumber = billRefNumber;
        }

        /**
         * amount
         * <p>
         * Transaction amount as integer. A positive integer in the smallest currency
         * unit (e.g., 100 cents to charge S$1.00, a zero-decimal currency). For
         * example, S$5.34 will be represented as 534.
         * (Required)
         * 
         */
        public Long getAmount() {
            return amount;
        }

        /**
         * amount
         * <p>
         * Transaction amount as integer. A positive integer in the smallest currency
         * unit (e.g., 100 cents to charge S$1.00, a zero-decimal currency). For
         * example, S$5.34 will be represented as 534.
         * (Required)
         * 
         */
        public void setAmount(Long amount) {
            this.amount = amount;
        }

        /**
         * currency
         * <p>
         * Currency that is associated with the payment amount. Specify the three-letter
         * [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
         * 
         * (Required)
         * 
         */
        public Currency getCurrency() {
            return currency;
        }

        /**
         * currency
         * <p>
         * Currency that is associated with the payment amount. Specify the three-letter
         * [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
         * 
         * (Required)
         * 
         */
        public void setCurrency(Currency currency) {
            this.currency = currency;
        }

        /**
         * reason
         * <p>
         * The reason code is for additional information on the payment.
         * 
         * In some cases, `reason` could be empty. For example, when `txStatus​` is
         * ​`success`.
         * 
         * This is a list of possible reasons returned the API response for charge and
         * the status check endpoints. This list might be updated over time. Thus, it is
         * important for your system to handle any unknown reason codes in the response
         * that are not mentioned in this document.
         * 
         * | Value | Description |
         * | ---------------------- |
         * ------------------------------------------------------------ |
         * | `currency_mismatch` | Currency used in this request does not match with the
         * merchant configuration. |
         * | `no_record_found` | No record found for this transaction. |
         * | `authorising` | System is processing a request for the transaction to be
         * authorized. |
         * | `capturing` | System is processing a request for the transaction to be
         * captured. |
         * | `user_fail_consent` | User was not able to provide approval for the
         * transaction in time. |
         * | `pending_user_consent` | Transaction is still pending user's approval on
         * GrabPay's checkout page. |
         * | `pending_capture` | Transaction is still pending a `/charge/complete` call
         * for the payment to be finalized. |
         * | `cancelling` | Transaction is in the process of being cancelled. |
         * | `auth_expired` | Transaction is cancelled as the transaction was not
         * completed with the `/charge/complete` call in time. |
         * | `unknown` | The charge is still being processed, however the reason for
         * this cannot be determined. |
         * | `kyc_compliance_decline` | Transaction was unsuccessful due to regulatory
         * compliance checks. |
         * | `transaction_decline` | Transaction was declined. |
         * | `insufficient_balance` | There was an insufficient balance in the user's
         * wallet to complete the transaction. |
         * 
         * 
         */
        public String getReason() {
            return reason;
        }

        /**
         * reason
         * <p>
         * The reason code is for additional information on the payment.
         * 
         * In some cases, `reason` could be empty. For example, when `txStatus​` is
         * ​`success`.
         * 
         * This is a list of possible reasons returned the API response for charge and
         * the status check endpoints. This list might be updated over time. Thus, it is
         * important for your system to handle any unknown reason codes in the response
         * that are not mentioned in this document.
         * 
         * | Value | Description |
         * | ---------------------- |
         * ------------------------------------------------------------ |
         * | `currency_mismatch` | Currency used in this request does not match with the
         * merchant configuration. |
         * | `no_record_found` | No record found for this transaction. |
         * | `authorising` | System is processing a request for the transaction to be
         * authorized. |
         * | `capturing` | System is processing a request for the transaction to be
         * captured. |
         * | `user_fail_consent` | User was not able to provide approval for the
         * transaction in time. |
         * | `pending_user_consent` | Transaction is still pending user's approval on
         * GrabPay's checkout page. |
         * | `pending_capture` | Transaction is still pending a `/charge/complete` call
         * for the payment to be finalized. |
         * | `cancelling` | Transaction is in the process of being cancelled. |
         * | `auth_expired` | Transaction is cancelled as the transaction was not
         * completed with the `/charge/complete` call in time. |
         * | `unknown` | The charge is still being processed, however the reason for
         * this cannot be determined. |
         * | `kyc_compliance_decline` | Transaction was unsuccessful due to regulatory
         * compliance checks. |
         * | `transaction_decline` | Transaction was declined. |
         * | `insufficient_balance` | There was an insufficient balance in the user's
         * wallet to complete the transaction. |
         * 
         * 
         */
        public void setReason(String reason) {
            this.reason = reason;
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(TransactionDetails.class.getName()).append('@')
                    .append(Integer.toHexString(System.identityHashCode(this))).append('[');
            sb.append("paymentChannel");
            sb.append('=');
            sb.append(((this.paymentChannel == null) ? "<null>" : this.paymentChannel));
            sb.append(',');
            sb.append("storeGrabID");
            sb.append('=');
            sb.append(((this.storeGrabID == null) ? "<null>" : this.storeGrabID));
            sb.append(',');
            sb.append("originPartnerTxID");
            sb.append('=');
            sb.append(((this.originPartnerTxID == null) ? "<null>" : this.originPartnerTxID));
            sb.append(',');
            sb.append("partnerTxID");
            sb.append('=');
            sb.append(((this.partnerTxID == null) ? "<null>" : this.partnerTxID));
            sb.append(',');
            sb.append("partnerGroupTxID");
            sb.append('=');
            sb.append(((this.partnerGroupTxID == null) ? "<null>" : this.partnerGroupTxID));
            sb.append(',');
            sb.append("billRefNumber");
            sb.append('=');
            sb.append(((this.billRefNumber == null) ? "<null>" : this.billRefNumber));
            sb.append(',');
            sb.append("amount");
            sb.append('=');
            sb.append(((this.amount == null) ? "<null>" : this.amount));
            sb.append(',');
            sb.append("currency");
            sb.append('=');
            sb.append(((this.currency == null) ? "<null>" : this.currency));
            sb.append(',');
            sb.append("reason");
            sb.append('=');
            sb.append(((this.reason == null) ? "<null>" : this.reason));
            sb.append(',');
            if (sb.charAt((sb.length() - 1)) == ',') {
                sb.setCharAt((sb.length() - 1), ']');
            } else {
                sb.append(']');
            }
            return sb.toString();
        }

        @Override
        public int hashCode() {
            int result = 1;
            result = ((result * 31) + ((this.reason == null) ? 0 : this.reason.hashCode()));
            result = ((result * 31) + ((this.amount == null) ? 0 : this.amount.hashCode()));
            result = ((result * 31) + ((this.currency == null) ? 0 : this.currency.hashCode()));
            result = ((result * 31) + ((this.originPartnerTxID == null) ? 0 : this.originPartnerTxID.hashCode()));
            result = ((result * 31) + ((this.billRefNumber == null) ? 0 : this.billRefNumber.hashCode()));
            result = ((result * 31) + ((this.partnerTxID == null) ? 0 : this.partnerTxID.hashCode()));
            result = ((result * 31) + ((this.partnerGroupTxID == null) ? 0 : this.partnerGroupTxID.hashCode()));
            result = ((result * 31) + ((this.paymentChannel == null) ? 0 : this.paymentChannel.hashCode()));
            result = ((result * 31) + ((this.storeGrabID == null) ? 0 : this.storeGrabID.hashCode()));
            return result;
        }

        @Override
        public boolean equals(Object other) {
            if (other == this) {
                return true;
            }
            if ((other instanceof TransactionDetails) == false) {
                return false;
            }
            TransactionDetails rhs = ((TransactionDetails) other);
            return ((((((((((this.reason == rhs.reason) || ((this.reason != null) && this.reason.equals(rhs.reason)))
                    && ((this.amount == rhs.amount) || ((this.amount != null) && this.amount.equals(rhs.amount))))
                    && ((this.currency == rhs.currency)
                            || ((this.currency != null) && this.currency.equals(rhs.currency))))
                    && ((this.originPartnerTxID == rhs.originPartnerTxID)
                            || ((this.originPartnerTxID != null)
                                    && this.originPartnerTxID.equals(rhs.originPartnerTxID))))
                    && ((this.billRefNumber == rhs.billRefNumber)
                            || ((this.billRefNumber != null) && this.billRefNumber.equals(rhs.billRefNumber))))
                    && ((this.partnerTxID == rhs.partnerTxID)
                            || ((this.partnerTxID != null) && this.partnerTxID.equals(rhs.partnerTxID))))
                    && ((this.partnerGroupTxID == rhs.partnerGroupTxID)
                            || ((this.partnerGroupTxID != null) && this.partnerGroupTxID.equals(rhs.partnerGroupTxID))))
                    && ((this.paymentChannel == rhs.paymentChannel)
                            || ((this.paymentChannel != null) && this.paymentChannel.equals(rhs.paymentChannel))))
                    && ((this.storeGrabID == rhs.storeGrabID)
                            || ((this.storeGrabID != null) && this.storeGrabID.equals(rhs.storeGrabID))));
        }

    }

    private TransactionDetails transactionDetails;

    public TransactionDetails getTransactionDetails() {
        return transactionDetails;
    }

    public void setTransactionDetails(TransactionDetails transactionDetails) {
        this.transactionDetails = transactionDetails;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(PosRefundRequest.class.getName()).append('@')
                .append(Integer.toHexString(System.identityHashCode(this))).append('[');
        sb.append("transactionDetails");
        sb.append('=');
        sb.append(((this.transactionDetails == null) ? "<null>" : this.transactionDetails));
        sb.append(',');
        if (sb.charAt((sb.length() - 1)) == ',') {
            sb.setCharAt((sb.length() - 1), ']');
        } else {
            sb.append(']');
        }
        return sb.toString();
    }

    @Override
    public int hashCode() {
        int result = 1;
        result = ((result * 31) + ((this.transactionDetails == null) ? 0 : this.transactionDetails.hashCode()));
        return result;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof PosRefundRequest) == false) {
            return false;
        }
        PosRefundRequest rhs = ((PosRefundRequest) other);
        return ((this.transactionDetails == rhs.transactionDetails)
                || ((this.transactionDetails != null) && this.transactionDetails.equals(rhs.transactionDetails)));
    }

}
