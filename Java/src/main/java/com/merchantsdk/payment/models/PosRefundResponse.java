package com.merchantsdk.payment.models;

/**
 * PosRefundResponse
 * <p>
 * 
 * 
 */
public class PosRefundResponse {
    public static class TransactionDetails {

        /**
         * Payment channel
         * <p>
         * This field will be used to differentiate the different POS payment channels,
         * and will determine which other Conditional parameters will need to be
         * required in the request, or processed in the response.
         * 
         */
        private PosPaymentChannel paymentChannel;
        /**
         * storeGrabID
         * <p>
         * This field is the unique store identifier issued by Grab to the merchant.
         * 
         */
        private String storeGrabID;
        /**
         * grabTxID
         * <p>
         * This field contains the unique transaction reference number issued by Grab.
         * This field will be idempotent to Grab.
         * 
         */
        private String grabTxID;
        /**
         * paymentTxID
         * <p>
         * The partner's transaction ID.
         * 
         */
        private String partnerTxID;
        /**
         * partnerGroupTxID
         * <p>
         * This is the unique identifier of each transaction generated by the partner.
         * Each transaction might consist of several charges. Usually the value is a
         * single receipt ID from the partner and can be displayed to the user.
         * 
         */
        private String partnerGroupTxID;
        /**
         * amount
         * <p>
         * Transaction amount as integer. A positive integer in the smallest currency
         * unit (e.g., 100 cents to charge S$1.00, a zero-decimal currency). For
         * example, S$5.34 will be represented as 534.
         * 
         */
        private Long amount;
        /**
         * currency
         * <p>
         * Currency that is associated with the payment amount. Specify the three-letter
         * [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
         * 
         * 
         */
        private Currency currency;
        /**
         * Payment Method
         * <p>
         * Returns one of the enum values.
         * 
         * `CARD` is only applicable to Thailand.
         * 
         * `PAYNOW`, `DUITNOW`, `QRPH` are only applicable to POS API.
         * (Required)
         * 
         */
        private PosPaymentMethod paymentMethod;
        /**
         * This field contains the time which the transaction was last updated in Grab's
         * system. For a successful transaction, this will be the time where Grab
         * registers the transaction in its system. This field will be in Unix Epoch
         * time.
         * (Required)
         * 
         */
        private Long updatedTime;

        /**
         * Payment channel
         * <p>
         * This field will be used to differentiate the different POS payment channels,
         * and will determine which other Conditional parameters will need to be
         * required in the request, or processed in the response.
         * 
         */
        public PosPaymentChannel getPaymentChannel() {
            return paymentChannel;
        }

        /**
         * Payment channel
         * <p>
         * This field will be used to differentiate the different POS payment channels,
         * and will determine which other Conditional parameters will need to be
         * required in the request, or processed in the response.
         * 
         */
        public void setPaymentChannel(PosPaymentChannel paymentChannel) {
            this.paymentChannel = paymentChannel;
        }

        /**
         * storeGrabID
         * <p>
         * This field is the unique store identifier issued by Grab to the merchant.
         * 
         */
        public String getStoreGrabID() {
            return storeGrabID;
        }

        /**
         * storeGrabID
         * <p>
         * This field is the unique store identifier issued by Grab to the merchant.
         * 
         */
        public void setStoreGrabID(String storeGrabID) {
            this.storeGrabID = storeGrabID;
        }

        /**
         * grabTxID
         * <p>
         * This field contains the unique transaction reference number issued by Grab.
         * This field will be idempotent to Grab.
         * 
         */
        public String getGrabTxID() {
            return grabTxID;
        }

        /**
         * grabTxID
         * <p>
         * This field contains the unique transaction reference number issued by Grab.
         * This field will be idempotent to Grab.
         * 
         */
        public void setGrabTxID(String grabTxID) {
            this.grabTxID = grabTxID;
        }

        /**
         * paymentTxID
         * <p>
         * The partner's transaction ID.
         * 
         */
        public String getPartnerTxID() {
            return partnerTxID;
        }

        /**
         * paymentTxID
         * <p>
         * The partner's transaction ID.
         * 
         */
        public void setPartnerTxID(String partnerTxID) {
            this.partnerTxID = partnerTxID;
        }

        /**
         * partnerGroupTxID
         * <p>
         * This is the unique identifier of each transaction generated by the partner.
         * Each transaction might consist of several charges. Usually the value is a
         * single receipt ID from the partner and can be displayed to the user.
         * 
         */
        public String getPartnerGroupTxID() {
            return partnerGroupTxID;
        }

        /**
         * partnerGroupTxID
         * <p>
         * This is the unique identifier of each transaction generated by the partner.
         * Each transaction might consist of several charges. Usually the value is a
         * single receipt ID from the partner and can be displayed to the user.
         * 
         */
        public void setPartnerGroupTxID(String partnerGroupTxID) {
            this.partnerGroupTxID = partnerGroupTxID;
        }

        /**
         * amount
         * <p>
         * Transaction amount as integer. A positive integer in the smallest currency
         * unit (e.g., 100 cents to charge S$1.00, a zero-decimal currency). For
         * example, S$5.34 will be represented as 534.
         * 
         */
        public Long getAmount() {
            return amount;
        }

        /**
         * amount
         * <p>
         * Transaction amount as integer. A positive integer in the smallest currency
         * unit (e.g., 100 cents to charge S$1.00, a zero-decimal currency). For
         * example, S$5.34 will be represented as 534.
         * 
         */
        public void setAmount(Long amount) {
            this.amount = amount;
        }

        /**
         * currency
         * <p>
         * Currency that is associated with the payment amount. Specify the three-letter
         * [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
         * 
         * 
         */
        public Currency getCurrency() {
            return currency;
        }

        /**
         * currency
         * <p>
         * Currency that is associated with the payment amount. Specify the three-letter
         * [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
         * 
         * 
         */
        public void setCurrency(Currency currency) {
            this.currency = currency;
        }

        /**
         * Payment Method
         * <p>
         * Returns one of the enum values.
         * 
         * `CARD` is only applicable to Thailand.
         * 
         * `PAYNOW`, `DUITNOW`, `QRPH` are only applicable to POS API.
         * (Required)
         * 
         */
        public PosPaymentMethod getPaymentMethod() {
            return paymentMethod;
        }

        /**
         * Payment Method
         * <p>
         * Returns one of the enum values.
         * 
         * `CARD` is only applicable to Thailand.
         * 
         * `PAYNOW`, `DUITNOW`, `QRPH` are only applicable to POS API.
         * (Required)
         * 
         */
        public void setPaymentMethod(PosPaymentMethod paymentMethod) {
            this.paymentMethod = paymentMethod;
        }

        /**
         * This field contains the time which the transaction was last updated in Grab's
         * system. For a successful transaction, this will be the time where Grab
         * registers the transaction in its system. This field will be in Unix Epoch
         * time.
         * (Required)
         * 
         */
        public Long getUpdatedTime() {
            return updatedTime;
        }

        /**
         * This field contains the time which the transaction was last updated in Grab's
         * system. For a successful transaction, this will be the time where Grab
         * registers the transaction in its system. This field will be in Unix Epoch
         * time.
         * (Required)
         * 
         */
        public void setUpdatedTime(Long updatedTime) {
            this.updatedTime = updatedTime;
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(TransactionDetails.class.getName()).append('@')
                    .append(Integer.toHexString(System.identityHashCode(this))).append('[');
            sb.append("paymentChannel");
            sb.append('=');
            sb.append(((this.paymentChannel == null) ? "<null>" : this.paymentChannel));
            sb.append(',');
            sb.append("storeGrabID");
            sb.append('=');
            sb.append(((this.storeGrabID == null) ? "<null>" : this.storeGrabID));
            sb.append(',');
            sb.append("grabTxID");
            sb.append('=');
            sb.append(((this.grabTxID == null) ? "<null>" : this.grabTxID));
            sb.append(',');
            sb.append("partnerTxID");
            sb.append('=');
            sb.append(((this.partnerTxID == null) ? "<null>" : this.partnerTxID));
            sb.append(',');
            sb.append("partnerGroupTxID");
            sb.append('=');
            sb.append(((this.partnerGroupTxID == null) ? "<null>" : this.partnerGroupTxID));
            sb.append(',');
            sb.append("amount");
            sb.append('=');
            sb.append(((this.amount == null) ? "<null>" : this.amount));
            sb.append(',');
            sb.append("currency");
            sb.append('=');
            sb.append(((this.currency == null) ? "<null>" : this.currency));
            sb.append(',');
            sb.append("paymentMethod");
            sb.append('=');
            sb.append(((this.paymentMethod == null) ? "<null>" : this.paymentMethod));
            sb.append(',');
            sb.append("updatedTime");
            sb.append('=');
            sb.append(((this.updatedTime == null) ? "<null>" : this.updatedTime));
            sb.append(',');
            if (sb.charAt((sb.length() - 1)) == ',') {
                sb.setCharAt((sb.length() - 1), ']');
            } else {
                sb.append(']');
            }
            return sb.toString();
        }

        @Override
        public int hashCode() {
            int result = 1;
            result = ((result * 31) + ((this.updatedTime == null) ? 0 : this.updatedTime.hashCode()));
            result = ((result * 31) + ((this.amount == null) ? 0 : this.amount.hashCode()));
            result = ((result * 31) + ((this.grabTxID == null) ? 0 : this.grabTxID.hashCode()));
            result = ((result * 31) + ((this.paymentMethod == null) ? 0 : this.paymentMethod.hashCode()));
            result = ((result * 31) + ((this.currency == null) ? 0 : this.currency.hashCode()));
            result = ((result * 31) + ((this.partnerTxID == null) ? 0 : this.partnerTxID.hashCode()));
            result = ((result * 31) + ((this.partnerGroupTxID == null) ? 0 : this.partnerGroupTxID.hashCode()));
            result = ((result * 31) + ((this.paymentChannel == null) ? 0 : this.paymentChannel.hashCode()));
            result = ((result * 31) + ((this.storeGrabID == null) ? 0 : this.storeGrabID.hashCode()));
            return result;
        }

        @Override
        public boolean equals(Object other) {
            if (other == this) {
                return true;
            }
            if ((other instanceof TransactionDetails) == false) {
                return false;
            }
            TransactionDetails rhs = ((TransactionDetails) other);
            return ((((((((((this.updatedTime == rhs.updatedTime)
                    || ((this.updatedTime != null) && this.updatedTime.equals(rhs.updatedTime)))
                    && ((this.amount == rhs.amount) || ((this.amount != null) && this.amount.equals(rhs.amount))))
                    && ((this.grabTxID == rhs.grabTxID)
                            || ((this.grabTxID != null) && this.grabTxID.equals(rhs.grabTxID))))
                    && ((this.paymentMethod == rhs.paymentMethod)
                            || ((this.paymentMethod != null) && this.paymentMethod.equals(rhs.paymentMethod))))
                    && ((this.currency == rhs.currency)
                            || ((this.currency != null) && this.currency.equals(rhs.currency))))
                    && ((this.partnerTxID == rhs.partnerTxID)
                            || ((this.partnerTxID != null) && this.partnerTxID.equals(rhs.partnerTxID))))
                    && ((this.partnerGroupTxID == rhs.partnerGroupTxID)
                            || ((this.partnerGroupTxID != null) && this.partnerGroupTxID.equals(rhs.partnerGroupTxID))))
                    && ((this.paymentChannel == rhs.paymentChannel)
                            || ((this.paymentChannel != null) && this.paymentChannel.equals(rhs.paymentChannel))))
                    && ((this.storeGrabID == rhs.storeGrabID)
                            || ((this.storeGrabID != null) && this.storeGrabID.equals(rhs.storeGrabID))));
        }

    }

    private TransactionDetails transactionDetails;
    /**
     * originTxDetails
     * <p>
     * This object is only applicable if the `txType` is REFUND.
     * 
     */
    private OriginTxDetails originTxDetails;
    /**
     * promoRefundDetails
     * <p>
     * This is only applicable if the `txType` is REFUND.
     * 
     */
    private PromoRefundDetails promoRefundDetails;
    /**
     * statusDetails
     * <p>
     * 
     * 
     */
    private StatusDetails statusDetails;
    /**
     * metadata
     * <p>
     * 
     * 
     */
    private Metadata metadata;

    public TransactionDetails getTransactionDetails() {
        return transactionDetails;
    }

    public void setTransactionDetails(TransactionDetails transactionDetails) {
        this.transactionDetails = transactionDetails;
    }

    /**
     * originTxDetails
     * <p>
     * This object is only applicable if the `txType` is REFUND.
     * 
     */
    public OriginTxDetails getOriginTxDetails() {
        return originTxDetails;
    }

    /**
     * originTxDetails
     * <p>
     * This object is only applicable if the `txType` is REFUND.
     * 
     */
    public void setOriginTxDetails(OriginTxDetails originTxDetails) {
        this.originTxDetails = originTxDetails;
    }

    /**
     * promoRefundDetails
     * <p>
     * This is only applicable if the `txType` is REFUND.
     * 
     */
    public PromoRefundDetails getPromoRefundDetails() {
        return promoRefundDetails;
    }

    /**
     * promoRefundDetails
     * <p>
     * This is only applicable if the `txType` is REFUND.
     * 
     */
    public void setPromoRefundDetails(PromoRefundDetails promoRefundDetails) {
        this.promoRefundDetails = promoRefundDetails;
    }

    /**
     * statusDetails
     * <p>
     * 
     * 
     */
    public StatusDetails getStatusDetails() {
        return statusDetails;
    }

    /**
     * statusDetails
     * <p>
     * 
     * 
     */
    public void setStatusDetails(StatusDetails statusDetails) {
        this.statusDetails = statusDetails;
    }

    /**
     * metadata
     * <p>
     * 
     * 
     */
    public Metadata getMetadata() {
        return metadata;
    }

    /**
     * metadata
     * <p>
     * 
     * 
     */
    public void setMetadata(Metadata metadata) {
        this.metadata = metadata;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(PosRefundResponse.class.getName()).append('@')
                .append(Integer.toHexString(System.identityHashCode(this))).append('[');
        sb.append("transactionDetails");
        sb.append('=');
        sb.append(((this.transactionDetails == null) ? "<null>" : this.transactionDetails));
        sb.append(',');
        sb.append("originTxDetails");
        sb.append('=');
        sb.append(((this.originTxDetails == null) ? "<null>" : this.originTxDetails));
        sb.append(',');
        sb.append("promoRefundDetails");
        sb.append('=');
        sb.append(((this.promoRefundDetails == null) ? "<null>" : this.promoRefundDetails));
        sb.append(',');
        sb.append("statusDetails");
        sb.append('=');
        sb.append(((this.statusDetails == null) ? "<null>" : this.statusDetails));
        sb.append(',');
        sb.append("metadata");
        sb.append('=');
        sb.append(((this.metadata == null) ? "<null>" : this.metadata));
        sb.append(',');
        if (sb.charAt((sb.length() - 1)) == ',') {
            sb.setCharAt((sb.length() - 1), ']');
        } else {
            sb.append(']');
        }
        return sb.toString();
    }

    @Override
    public int hashCode() {
        int result = 1;
        result = ((result * 31) + ((this.transactionDetails == null) ? 0 : this.transactionDetails.hashCode()));
        result = ((result * 31) + ((this.promoRefundDetails == null) ? 0 : this.promoRefundDetails.hashCode()));
        result = ((result * 31) + ((this.statusDetails == null) ? 0 : this.statusDetails.hashCode()));
        result = ((result * 31) + ((this.metadata == null) ? 0 : this.metadata.hashCode()));
        result = ((result * 31) + ((this.originTxDetails == null) ? 0 : this.originTxDetails.hashCode()));
        return result;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof PosRefundResponse) == false) {
            return false;
        }
        PosRefundResponse rhs = ((PosRefundResponse) other);
        return ((((((this.transactionDetails == rhs.transactionDetails)
                || ((this.transactionDetails != null) && this.transactionDetails.equals(rhs.transactionDetails)))
                && ((this.promoRefundDetails == rhs.promoRefundDetails) || ((this.promoRefundDetails != null)
                        && this.promoRefundDetails.equals(rhs.promoRefundDetails))))
                && ((this.statusDetails == rhs.statusDetails)
                        || ((this.statusDetails != null) && this.statusDetails.equals(rhs.statusDetails))))
                && ((this.metadata == rhs.metadata) || ((this.metadata != null) && this.metadata.equals(rhs.metadata))))
                && ((this.originTxDetails == rhs.originTxDetails)
                        || ((this.originTxDetails != null) && this.originTxDetails.equals(rhs.originTxDetails))));
    }

}
